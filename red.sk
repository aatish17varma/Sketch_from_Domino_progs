/* 
// Original program: 
//#include "hashes.h"

//int rand(int prob) {
//  int hash_val = hash2(prob, 0);
//  int hash_val = prob;
//  if (hash_val > 1000) {
//    return 1;
//  } else {
//    return 0;
//  } 
//} 

struct Packet {
  int q_inst;
  int mark; 
  int prob;
  int gain;
};

int q_avg = 0;

void func(struct Packet p) {
  q_avg = (p.gain * q_avg) + (1 - p.gain) * p.q_inst;
  if (q_avg < 50) {
    p.mark = 0;
  } else if (q_avg > 100) {
    p.mark = 1;
  } else {
    p.prob = (q_avg - 50) * 100000 / (100 - 50);
    p.mark = p.prob;
  }
}
 */

// Output the rename map:
// stateless variable rename list: 

// state_and_packet.pkt_0 = p.gain
// state_and_packet.pkt_1 = p.q_inst
// state_and_packet.pkt_2 = p.mark
// state_and_packet.pkt_3 = p.prob

// stateful variable rename list: 

// state_and_packet.state_0 = q_avg

|StateAndPacket| program (|StateAndPacket| state_and_packet) {state_and_packet.state_0=(state_and_packet.pkt_0*state_and_packet.state_0)+(1-state_and_packet.pkt_0)*state_and_packet.pkt_1;if (state_and_packet.state_0<50) {state_and_packet.pkt_2=0;; }else {if (state_and_packet.state_0>100) {state_and_packet.pkt_2=1;; }else {state_and_packet.pkt_3=(state_and_packet.state_0-50)*100000/(100-50);state_and_packet.pkt_2=state_and_packet.pkt_3;; }; }; return state_and_packet;
}