/* 
// Original program: 
#define PBS 2
#define CBS 2

#define PIR 2
#define CIR 1

struct Packet {
  int size;
  int color;
  int time;
};

int tp = PBS;
int tc = CBS;
int last_time = 0;

void func(struct Packet pkt) {
  if (tp < pkt.size) {
    // exceeds peak rate (PIR) (red)
    pkt.color = 1;
  } else if (tc < pkt.size) {
    // exceeds commitited, but not peak (orange)
    pkt.color = 2;
    tp = tp - pkt.size;
  } else {
    // within both peak and committed rates (green)
    pkt.color = 3;
    tp = tp - pkt.size;
    tc = tc - pkt.size;
  }

  // Refill logic
  tp = tp + PIR * (pkt.time - last_time);
  if (tp > PBS) tp = PBS;

  tc = tc + CIR * (pkt.time - last_time);
  if (tc > CBS) tc = CBS;

  last_time = pkt.time;

}
 */

// Output the rename map:
// stateless variable rename list: 

// state_and_packet.pkt_0 = pkt.size
// state_and_packet.pkt_1 = pkt.color
// state_and_packet.pkt_2 = pkt.time

// stateful variable rename list: 

// state_and_packet.state_0 = tp
// state_and_packet.state_1 = tc
// state_and_packet.state_2 = last_time

|StateAndPacket| program (|StateAndPacket| state_and_packet) {if (state_and_packet.state_0<state_and_packet.pkt_0) {state_and_packet.pkt_1=1;; }else {if (state_and_packet.state_1<state_and_packet.pkt_0) {state_and_packet.pkt_1=2;state_and_packet.state_0=state_and_packet.state_0-state_and_packet.pkt_0;; }else {state_and_packet.pkt_1=3;state_and_packet.state_0=state_and_packet.state_0-state_and_packet.pkt_0;state_and_packet.state_1=state_and_packet.state_1-state_and_packet.pkt_0;; }; };state_and_packet.state_0=state_and_packet.state_0+2*(state_and_packet.pkt_2-state_and_packet.state_2);if (state_and_packet.state_0>2) {state_and_packet.state_0=2; };state_and_packet.state_1=state_and_packet.state_1+1*(state_and_packet.pkt_2-state_and_packet.state_2);if (state_and_packet.state_1>2) {state_and_packet.state_1=2; };state_and_packet.state_2=state_and_packet.pkt_2; return state_and_packet;
}